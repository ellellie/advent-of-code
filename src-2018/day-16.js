const util = require("./util")
const _ = require("lodash")

let input = util.input(16).split("\n\n")
let reg = []

const match = inp => {
    let [bef, opc, aft] = inp.split("\n").map(l => l.split(" ").map(c => +c))
    //console.log(bef, opc, aft, inp.split("\n"))
    return {
        bef, opc, aft
    }
}

match(input[0])

const opcodes = [
    (a, b, c) => reg[c] = reg[a] + reg[b],  // add r
    (a, b, c) => reg[c] = reg[a] + b,       // add i
    (a, b, c) => reg[c] = reg[a] * reg[b],  // mul r
    (a, b, c) => reg[c] = reg[a] * b,       // mul i
    (a, b, c) => reg[c] = reg[a] & reg[b],  // ban r
    (a, b, c) => reg[c] = reg[a] & b,       // ban i
    (a, b, c) => reg[c] = reg[a] | reg[b],  // bor r
    (a, b, c) => reg[c] = reg[a] | b,       // bor i
    (a, b, c) => reg[c] = reg[a],           // set r
    (a, b, c) => reg[c] = a,                // set i
    (a, b, c) => reg[c] = a > reg[b]?1:0,    // gti r
    (a, b, c) => reg[c] = reg[a] > b?1:0,    // gtr i
    (a, b, c) => reg[c] = reg[a] > reg[b]?1:0,//gtr r
    (a, b, c) => reg[c] = a==reg[b]?1:0,  // eqi r
    (a, b, c) => reg[c] = reg[a]==b?1:0,  // eqr i
    (a, b, c) => reg[c] = reg[a]==reg[b]?1:0// eqr r
]

const test = (bef, opc, aft) => {
    //console.log(bef, opc, aft)
    let f = 0
    let r = []
    for(let j in opcodes) {
        op = opcodes[j]
        reg = _.clone(bef)
        op(opc[1], opc[2], opc[3])
        if(_.isEqual(reg, aft)) {
            f++
            r.push(+j)
        }
    }
    return [f, r]
}

let map = Array(16).fill([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])

let sum = 0
for(let i of input) {
    let r = match(i)
    let res = test(r.bef, r.opc, r.aft)
    if(res[0] >= 3) sum++
    if(r.opc === 1) console.log(r.opc )
    let o = map[r.opc[0]]
    map[r.opc[0]] = _.intersection(o, res[1])
}

let solve = []

const elim = () => {
    let solved = +_.filter( Object.keys(map), c => map[c].length === 1)[0]
    if(isNaN(solved)) return
    solve[solved] = map[solved][0]
    let k = map[solved][0]
    for(let j in map)
        _.remove(map[j], c => c == k)
    elim()
}

elim()

console.log(solve)

reg = [0,0,0,0]
let p = `4 0 2 0
13 2 0 2
2 2 3 2
4 3 2 3
3 3 2 2
13 2 1 2
6 2 1 1
10 1 2 3
4 2 3 0
13 1 0 1
2 1 1 1
13 3 0 2
2 2 1 2
12 1 0 1
13 1 2 1
6 1 3 3
10 3 1 1
4 0 1 2
4 2 2 3
5 0 3 3
13 3 1 3
6 3 1 1
4 2 1 2
4 0 3 3
9 3 2 2
13 2 1 2
13 2 1 2
6 1 2 1
10 1 3 0
4 0 0 1
13 0 0 2
2 2 2 2
9 3 2 1
13 1 2 1
6 1 0 0
10 0 3 3
4 1 1 0
4 2 0 1
10 0 2 0
13 0 3 0
6 3 0 3
13 3 0 0
2 0 2 0
13 3 0 2
2 2 3 2
8 1 2 0
13 0 1 0
13 0 2 0
6 0 3 3
10 3 2 1
13 2 0 2
2 2 2 2
13 2 0 0
2 0 1 0
13 1 0 3
2 3 2 3
10 0 2 2
13 2 3 2
6 2 1 1
10 1 2 2
4 0 3 3
4 2 1 0
13 2 0 1
2 1 3 1
1 0 3 0
13 0 1 0
6 0 2 2
10 2 1 1
4 3 0 2
4 1 2 0
4 2 0 3
12 0 3 0
13 0 3 0
6 0 1 1
10 1 1 2
4 1 1 1
4 3 3 0
12 1 3 0
13 0 1 0
6 0 2 2
10 2 3 3
4 3 0 1
4 0 3 2
4 2 2 0
3 1 2 1
13 1 1 1
6 1 3 3
10 3 2 2
4 2 0 3
4 0 1 1
5 0 3 1
13 1 1 1
6 2 1 2
10 2 3 3
4 3 1 1
13 3 0 2
2 2 0 2
7 0 1 2
13 2 2 2
6 2 3 3
4 3 1 2
0 0 2 2
13 2 3 2
6 3 2 3
10 3 1 0
4 0 2 1
4 3 0 3
4 0 0 2
3 3 2 1
13 1 1 1
13 1 1 1
6 1 0 0
10 0 1 2
4 0 1 1
4 1 0 3
13 3 0 0
2 0 2 0
2 3 1 1
13 1 3 1
13 1 2 1
6 1 2 2
10 2 0 3
4 3 0 2
13 0 0 1
2 1 2 1
4 0 1 0
8 1 2 1
13 1 2 1
6 1 3 3
10 3 2 2
4 2 3 0
4 3 1 1
4 0 1 3
7 0 1 3
13 3 2 3
6 3 2 2
10 2 0 3
4 3 3 0
4 3 0 2
3 1 2 1
13 1 3 1
6 3 1 3
10 3 3 0
4 1 2 3
4 3 3 1
13 3 0 2
2 2 2 2
7 2 1 2
13 2 1 2
13 2 1 2
6 0 2 0
10 0 1 3
4 0 1 1
4 1 3 0
4 1 1 2
2 0 1 0
13 0 1 0
6 0 3 3
10 3 1 0
4 2 2 2
4 3 1 1
4 0 1 3
9 3 2 2
13 2 1 2
6 0 2 0
10 0 0 1
4 2 2 0
13 2 0 3
2 3 1 3
4 2 1 2
14 0 3 3
13 3 3 3
6 3 1 1
4 2 0 3
4 3 3 0
15 0 3 0
13 0 1 0
6 1 0 1
10 1 3 2
13 3 0 0
2 0 2 0
4 1 2 1
1 0 3 0
13 0 2 0
6 2 0 2
10 2 3 0
4 0 3 3
4 3 3 1
13 2 0 2
2 2 2 2
9 3 2 3
13 3 1 3
13 3 1 3
6 3 0 0
10 0 0 3
4 2 0 1
4 0 1 2
4 3 1 0
0 2 0 0
13 0 1 0
13 0 1 0
6 3 0 3
10 3 3 1
4 2 2 3
13 2 0 0
2 0 3 0
0 2 0 2
13 2 1 2
13 2 3 2
6 2 1 1
10 1 2 3
4 0 2 2
4 2 0 1
3 0 2 2
13 2 3 2
6 2 3 3
4 0 0 1
4 1 2 0
4 0 3 2
6 0 0 0
13 0 2 0
13 0 1 0
6 0 3 3
4 1 2 0
4 3 0 1
4 2 0 2
10 0 2 0
13 0 3 0
6 3 0 3
10 3 3 0
4 2 2 1
4 2 1 3
4 0 2 2
11 2 3 3
13 3 1 3
6 0 3 0
10 0 0 1
4 2 2 2
4 0 1 3
4 1 1 0
9 3 2 3
13 3 2 3
6 3 1 1
10 1 1 3
13 3 0 1
2 1 2 1
4 0 3 2
13 0 2 1
13 1 1 1
13 1 1 1
6 3 1 3
10 3 0 1
4 3 1 0
4 3 3 2
4 0 1 3
11 3 2 2
13 2 3 2
6 1 2 1
10 1 3 0
13 3 0 2
2 2 2 2
4 0 1 1
4 3 1 3
13 3 1 3
6 0 3 0
10 0 3 1
4 0 0 0
4 3 2 2
4 0 1 3
11 3 2 0
13 0 3 0
6 0 1 1
10 1 0 2
13 3 0 3
2 3 2 3
4 2 3 0
4 3 0 1
1 0 3 3
13 3 1 3
6 3 2 2
10 2 0 1
4 3 2 2
13 0 0 3
2 3 2 3
4 3 0 0
15 0 3 0
13 0 1 0
13 0 2 0
6 0 1 1
4 2 2 2
4 0 0 3
4 3 0 0
9 3 2 2
13 2 3 2
13 2 2 2
6 2 1 1
10 1 3 2
4 2 2 3
13 3 0 1
2 1 1 1
4 1 0 0
12 0 3 1
13 1 1 1
13 1 3 1
6 1 2 2
10 2 3 1
4 3 0 0
4 0 1 3
4 2 2 2
9 3 2 3
13 3 3 3
6 3 1 1
10 1 3 0
13 1 0 1
2 1 3 1
4 2 3 3
4 0 3 2
11 2 3 3
13 3 2 3
6 0 3 0
10 0 1 3
4 2 0 1
4 2 3 2
4 1 1 0
6 0 0 2
13 2 2 2
13 2 3 2
6 2 3 3
10 3 1 0
4 1 3 3
4 3 0 2
4 3 1 1
4 2 1 2
13 2 2 2
6 2 0 0
10 0 2 3
4 0 2 0
4 3 1 2
4 2 0 1
8 1 2 2
13 2 2 2
6 2 3 3
10 3 1 1
13 0 0 0
2 0 2 0
13 0 0 3
2 3 1 3
4 3 3 2
14 0 3 3
13 3 1 3
13 3 2 3
6 1 3 1
10 1 1 3
4 0 1 0
4 1 3 1
4 0 1 2
13 1 2 0
13 0 3 0
6 0 3 3
10 3 2 2
13 2 0 0
2 0 2 0
4 2 3 3
5 0 3 3
13 3 1 3
6 2 3 2
10 2 2 1
4 1 2 3
4 3 3 0
4 0 1 2
13 3 2 2
13 2 3 2
6 1 2 1
10 1 1 3
13 3 0 0
2 0 1 0
4 2 3 2
4 2 0 1
10 0 2 2
13 2 1 2
13 2 1 2
6 2 3 3
10 3 0 1
4 0 3 0
4 0 0 3
4 1 3 2
4 3 2 3
13 3 3 3
6 3 1 1
10 1 2 2
4 2 0 3
4 2 0 0
4 2 1 1
5 0 3 1
13 1 2 1
6 1 2 2
10 2 3 1
4 1 2 3
4 2 1 2
14 0 3 0
13 0 1 0
6 0 1 1
10 1 3 3
4 3 0 2
13 0 0 0
2 0 2 0
13 3 0 1
2 1 1 1
0 0 2 1
13 1 3 1
6 3 1 3
10 3 2 0
4 0 1 1
4 3 0 3
4 0 3 2
4 2 3 1
13 1 2 1
6 0 1 0
10 0 3 2
4 3 1 1
4 1 3 0
4 2 1 3
12 0 3 1
13 1 1 1
6 2 1 2
4 3 2 1
4 2 0 0
4 0 0 3
1 0 3 1
13 1 3 1
6 2 1 2
10 2 1 1
4 3 3 0
4 0 0 2
0 2 0 3
13 3 2 3
6 3 1 1
10 1 0 0
4 0 0 3
4 2 0 1
13 0 0 2
2 2 3 2
8 1 2 3
13 3 3 3
6 0 3 0
10 0 0 2
4 1 1 1
4 2 3 0
4 2 0 3
5 0 3 1
13 1 1 1
13 1 3 1
6 2 1 2
10 2 1 0
4 1 1 1
4 0 1 3
4 2 0 2
9 3 2 3
13 3 1 3
6 0 3 0
10 0 3 1
13 2 0 0
2 0 2 0
4 3 1 3
15 3 0 0
13 0 3 0
13 0 1 0
6 1 0 1
10 1 1 0
13 1 0 1
2 1 1 1
13 3 0 3
2 3 2 3
1 2 3 3
13 3 2 3
6 0 3 0
10 0 1 2
4 2 1 0
4 0 2 1
4 2 1 3
5 0 3 0
13 0 3 0
6 0 2 2
10 2 0 3
13 0 0 0
2 0 2 0
4 3 2 2
4 1 3 1
13 1 2 2
13 2 2 2
6 2 3 3
10 3 0 1
13 0 0 3
2 3 3 3
4 3 1 0
4 0 2 2
0 2 0 3
13 3 1 3
6 1 3 1
10 1 0 0
4 3 2 2
4 0 3 3
4 2 0 1
11 3 2 1
13 1 3 1
6 0 1 0
4 1 3 1
4 1 1 3
13 3 2 3
13 3 3 3
13 3 2 3
6 0 3 0
10 0 2 1
4 0 0 3
4 0 2 0
11 3 2 2
13 2 1 2
6 2 1 1
4 2 2 0
4 3 1 2
4 2 2 3
5 0 3 3
13 3 2 3
13 3 3 3
6 3 1 1
10 1 2 0
4 0 2 3
13 0 0 1
2 1 2 1
8 1 2 1
13 1 3 1
6 0 1 0
4 0 0 1
4 2 3 2
1 2 3 1
13 1 1 1
13 1 3 1
6 1 0 0
10 0 2 1
13 1 0 0
2 0 0 0
4 0 1 2
13 0 0 3
2 3 2 3
11 2 3 2
13 2 2 2
13 2 1 2
6 2 1 1
13 1 0 0
2 0 2 0
4 0 3 3
4 2 2 2
1 2 3 0
13 0 3 0
6 0 1 1
10 1 3 0
4 2 0 1
4 3 1 2
1 1 3 2
13 2 1 2
6 2 0 0
10 0 3 2
4 2 2 0
4 1 0 1
13 3 0 3
2 3 2 3
12 1 0 0
13 0 1 0
6 2 0 2
4 2 1 0
5 0 3 0
13 0 2 0
6 0 2 2
10 2 3 1
13 2 0 0
2 0 3 0
4 0 2 3
4 2 1 2
8 2 0 3
13 3 1 3
6 1 3 1
10 1 1 2
4 2 2 0
13 2 0 1
2 1 3 1
4 2 3 3
7 0 1 0
13 0 2 0
6 2 0 2
10 2 2 1
4 0 1 3
4 0 2 0
4 2 3 2
9 3 2 3
13 3 2 3
6 1 3 1
4 1 0 0
4 3 2 3
10 0 2 2
13 2 1 2
6 1 2 1
10 1 0 2
4 3 1 1
4 2 2 0
4 0 1 3
7 0 1 0
13 0 2 0
13 0 3 0
6 2 0 2
10 2 3 3
4 2 2 0
13 3 0 1
2 1 1 1
4 0 0 2
13 1 2 2
13 2 2 2
13 2 1 2
6 2 3 3
4 0 3 2
4 3 2 0
0 2 0 1
13 1 1 1
6 3 1 3
10 3 2 1
13 0 0 2
2 2 3 2
4 1 2 3
4 2 1 0
0 0 2 2
13 2 1 2
13 2 2 2
6 2 1 1
10 1 2 2
4 3 0 1
13 2 0 3
2 3 2 3
7 0 1 1
13 1 1 1
13 1 1 1
6 2 1 2
10 2 3 3
4 3 3 1
4 1 1 0
4 2 0 2
7 2 1 2
13 2 3 2
6 3 2 3
4 2 2 1
4 3 1 0
4 0 0 2
3 0 2 1
13 1 3 1
6 1 3 3
10 3 1 0
4 2 0 1
4 2 3 2
13 3 0 3
2 3 0 3
1 1 3 1
13 1 2 1
6 0 1 0
10 0 0 1
4 1 1 2
13 3 0 3
2 3 3 3
4 2 3 0
15 3 0 0
13 0 1 0
13 0 3 0
6 0 1 1
4 1 0 0
4 1 2 3
13 0 0 2
2 2 2 2
10 0 2 3
13 3 3 3
13 3 3 3
6 3 1 1
4 3 0 0
13 1 0 3
2 3 2 3
7 2 0 0
13 0 2 0
13 0 3 0
6 0 1 1
13 2 0 0
2 0 0 0
13 2 0 3
2 3 1 3
4 3 0 2
13 3 2 0
13 0 3 0
6 1 0 1
10 1 1 0
4 0 0 2
4 1 3 1
13 1 2 2
13 2 2 2
6 2 0 0
4 1 1 2
4 3 0 1
4 2 0 3
15 1 3 1
13 1 1 1
13 1 3 1
6 1 0 0
13 2 0 2
2 2 2 2
4 0 3 3
4 0 3 1
9 3 2 2
13 2 3 2
6 2 0 0
4 2 0 2
4 2 0 1
9 3 2 3
13 3 3 3
13 3 3 3
6 3 0 0
10 0 0 1
4 2 1 0
4 1 3 2
4 2 1 3
5 0 3 2
13 2 2 2
13 2 1 2
6 2 1 1
4 0 0 0
13 0 0 2
2 2 0 2
13 1 0 3
2 3 1 3
6 3 3 0
13 0 2 0
13 0 1 0
6 0 1 1
4 1 2 0
4 2 1 3
6 0 0 2
13 2 1 2
13 2 1 2
6 2 1 1
10 1 1 2
4 1 2 3
4 0 2 1
4 2 0 0
14 0 3 1
13 1 2 1
13 1 2 1
6 2 1 2
10 2 2 0
4 1 2 2
4 3 2 3
4 3 0 1
3 1 2 2
13 2 1 2
13 2 2 2
6 2 0 0
10 0 1 3
4 3 3 0
4 2 1 2
4 2 3 1
7 2 0 2
13 2 3 2
6 3 2 3
10 3 3 1
4 2 2 0
4 2 3 3
4 3 2 2
5 0 3 2
13 2 1 2
13 2 2 2
6 1 2 1
4 1 2 0
13 3 0 3
2 3 0 3
4 3 2 2
11 3 2 0
13 0 3 0
13 0 2 0
6 0 1 1
4 0 0 2
4 1 1 0
4 3 2 3
3 3 2 3
13 3 2 3
6 1 3 1
4 2 3 3
4 2 0 0
11 2 3 0
13 0 2 0
6 0 1 1
10 1 3 3
4 1 1 0
13 3 0 1
2 1 0 1
2 0 1 0
13 0 3 0
6 0 3 3
10 3 2 2
13 1 0 0
2 0 2 0
4 3 3 1
4 1 0 3
14 0 3 0
13 0 2 0
6 2 0 2
4 1 3 0
4 2 0 3
4 2 2 1
12 0 3 3
13 3 3 3
6 2 3 2
10 2 2 1
4 3 3 2
13 0 0 3
2 3 1 3
6 3 3 0
13 0 1 0
6 0 1 1
10 1 0 3
4 1 0 0
4 0 2 1
4 2 1 2
10 0 2 1
13 1 2 1
6 3 1 3
10 3 3 0
4 0 2 1
4 3 3 2
4 0 1 3
11 3 2 3
13 3 3 3
13 3 2 3
6 3 0 0
4 0 0 2
4 3 3 1
13 1 0 3
2 3 2 3
11 2 3 2
13 2 3 2
6 0 2 0
10 0 3 3
4 0 0 2
4 1 0 1
4 1 0 0
13 1 2 2
13 2 2 2
6 3 2 3
10 3 2 2
4 0 0 1
4 0 2 3
2 0 1 1
13 1 3 1
13 1 1 1
6 2 1 2
10 2 3 0
4 3 0 1
4 1 1 3
4 0 3 2
2 3 1 3
13 3 2 3
13 3 1 3
6 0 3 0
10 0 1 1
4 2 3 2
4 0 3 3
4 1 1 0
9 3 2 2
13 2 3 2
6 1 2 1
4 2 3 3
4 2 2 0
13 2 0 2
2 2 1 2
5 0 3 0
13 0 3 0
6 0 1 1
4 0 2 2
4 3 0 0
11 2 3 3
13 3 2 3
13 3 3 3
6 1 3 1
10 1 0 0
4 0 3 3
13 1 0 1
2 1 3 1
4 2 3 2
7 2 1 3
13 3 2 3
6 0 3 0`.split("\n").map(l => l.split(" ").map(d => +d))

for(let l of p) {
    console.log(solve[l[0]])
    opcodes[solve[l[0]]](l[1], l[2], l[3])
}

console.log(reg)